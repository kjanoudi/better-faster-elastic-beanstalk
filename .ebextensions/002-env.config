# this file is to be located in your project/.ebextensions folder

#TO UPDATE NODE VERSION & ARCH
# replace  0.10.24 -> 0.11.0 (for example) and x86 -> x64 in
#  — all *env.config
#  — env.vars
#  — in AWS EB console for each env (env configuration settings) (may be unneccessary)

#TO UPDATE NPM
# uncomment "rm npm updated" in 40install_node.sh

#TO CHANGE NGINX VERSION
# update version number in env.vars

packages:
  yum:
    ImageMagick: []
    git: []
    mc: []
    gcc: []
    make: []
    openssl-devel: []
    tmux: []
    gcc-c++: []
    freetype-devel: []
    fontconfig-devel: []
    ruby: []
    rubygems: []
    pcre: []
    pcre-devel: []
    gperftools: []
    gperftools-devel: []
  rubygems:
    rubygems-update: []

option_settings:
  - option_name: NODE_ENV
    value: production
#set this var via console to update io.log nodename
  - namespace: aws:elasticbeanstalk:container:nodejs
    option_name: GzipCompression
    value: true

files:
  "/opt/elasticbeanstalk/env.vars" :
    mode: "000775"
    owner: root
    group: users
    content: |
      export HOME=/root
      export NPM_CONFIG_LOGLEVEL=warn
      export NPM_CONFIG_COLOR=false
      export NPM_CONFIG_PRODUCTION=true
      #note node vesion in .elasticbeanstalk/*.jsons
      export NODE_VER=6.6.0
      case $( arch ) in
      ( i686 ) export ARCH=x86;;
      ( x86_64 ) export ARCH=x64;;
      esac
      export NGINX_VER=1.8.0
      export PATH="$PATH:/opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/:/root/.npm:/opt/elasticbeanstalk/lib/ruby/bin/"

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/50npm.sh" :
    mode: "000666"
    owner: root
    group: users
    content: |
       #no need to run npm install during configdeploy

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/50npm.sh" :
    mode: "000775"
    owner: root
    group: users
    content: |
      #!/bin/bash
      . /opt/elasticbeanstalk/env.vars
      function error_exit
      {
        eventHelper.py --msg "$1" --severity ERROR
        exit $2
      }

      #avoid long NPM fetch hangups
      npm config set fetch-retry-maxtimeout 15000
      npm set progress=false

      # <START> When installing new node_modules
      if [ -d "/var/node_modules" ]; then
       echo "--------------------------- Removing NPM Modules -----------------" ;
       rm -rf /var/node_modules ;
      fi
       
      echo "------------------------------ — Installing/updating NPM modules, it might take a while, go take a leak or have a healthy snack... — -----------------------------------"
      OUT=$([ -d "/tmp/deployment/application" ] && cd /tmp/deployment/application && /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm install --production) || error_exit "Failed to run npm install.  $OUT" $?
      echo $OUT
      
      if [ -d /tmp/deployment/application ]; then
       cp -R /tmp/deployment/application/node_modules /var/
      fi
      
      chmod -R o+r /tmp/deployment/application/node_modules
      # <END>

      # <START> When just deploying normally
      # if [ -d /tmp/deployment/application ]; then
      #   cp -R /var/node_modules /tmp/deployment/application/
      #   chmod -R o+r /tmp/deployment/application/node_modules
      # fi
      # <END>

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/40install_node.sh" :
    mode: "000775"
    owner: root
    group: users
    content: |
      #!/bin/bash
      #source env variables including node version
      . /opt/elasticbeanstalk/env.vars

      function error_exit
      {
        eventHelper.py --msg "$1" --severity ERROR
        exit $2
      }


      #UNCOMMENT to update node, otherwise will be updated on instance init or rebuild
      # rm -f /opt/elasticbeanstalk/node-install/node_updated

      #download and extract desired node.js version
      echo "checking node..."
      OUT=$( [ ! -d "/opt/elasticbeanstalk/node-install" ] && echo "trying to install node.js $NODE_VER"   && mkdir /opt/elasticbeanstalk/node-install ; cd /opt/elasticbeanstalk/node-install/ && \
        wget -nc http://nodejs.org/dist/v$NODE_VER/node-v$NODE_VER-linux-$ARCH.tar.gz && \
        tar --skip-old-files -xzpf node-v$NODE_VER-linux-$ARCH.tar.gz) || error_exit "Failed to UPDATE node version. $OUT" $?.
      echo $OUT

      #UNCOMMENT to update npm, otherwise will be updated on instance init or rebuild
      # rm -f /opt/elasticbeanstalk/node-install/npm_updated

      #download & make install desired nginx version
      echo "checking nginx..."

      #remember to add desired modules to BOTH arch-dependent commands below:
      case $( arch ) in
      ( i686 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER" &>> /var/log/cfn-init.log  && \
       cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz |  tar zx && cd /root/nginx-$NGINX_VER  && \
        ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
         --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
         --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
         --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
         --with-pcre --with-debug  --with-ld-opt=' -Wl,-E' \
         --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -march=i686 -mtune=pentium4 -fasynchronous-unwind-tables' &>> /var/log/cfn-init.log \
        && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log);;

      ( x86_64 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER"   && \
       cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz |  tar zx && cd /root/nginx-$NGINX_VER &>> /var/log/cfn-init.log && \
        ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
         --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
         --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
         --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
         --with-pcre --with-debug \
         --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' --with-ld-opt=' -Wl,-E' &>> /var/log/cfn-init.log \
        && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log );;
      esac

      echo $OUT

      if [ ! -f "/opt/elasticbeanstalk/node-install/node_updated" ]; then
        rm -rf /usr/bin/node
        rm -rf /usr/bin/npm   
      fi

      #make sure node binaries can be found globally
      if [ ! -L /usr/bin/node ]; then
        ln -s /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/node /usr/bin/node
        touch /opt/elasticbeanstalk/node-install/node_updated
        echo "YAY! Updated node version to `node -v`"
      fi

      if [ ! -L /usr/bin/npm ]; then
        ln -s /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm /usr/bin/npm
      fi

      echo "checking npm..."
      if [ ! -f "/opt/elasticbeanstalk/node-install/npm_updated" ]; then
      cd /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/ && /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm update npm -g
      touch /opt/elasticbeanstalk/node-install/npm_updated
      echo "YAY! Updated global NPM version to `npm -v`"
      else
        echo "Skipping NPM -g version update. To update, please uncomment 40install_node.sh:12"
      fi


  "/opt/elasticbeanstalk/hooks/appdeploy/pre/40install_node.sh" :
    mode: "000775"
    owner: root
    group: users
    content: | 
      #!/bin/bash
      #source env variables including node version
      . /opt/elasticbeanstalk/env.vars

      function error_exit
      {
        eventHelper.py --msg "$1" --severity ERROR
        exit $2
      }


      #UNCOMMENT to update node, otherwise will be updated on instance init or rebuild
      # rm -f /opt/elasticbeanstalk/node-install/node_updated

      #download and extract desired node.js version
      echo "checking node..."
      OUT=$( [ ! -d "/opt/elasticbeanstalk/node-install" ] && echo "trying to install node.js $NODE_VER"   && mkdir /opt/elasticbeanstalk/node-install ; cd /opt/elasticbeanstalk/node-install/ && \
        wget -nc http://nodejs.org/dist/v$NODE_VER/node-v$NODE_VER-linux-$ARCH.tar.gz && \
        tar --skip-old-files -xzpf node-v$NODE_VER-linux-$ARCH.tar.gz) || error_exit "Failed to UPDATE node version. $OUT" $?.
      echo $OUT

      #UNCOMMENT to update npm, otherwise will be updated on instance init or rebuild
      # rm -f /opt/elasticbeanstalk/node-install/npm_updated

      #download & make install desired nginx version
      echo "checking nginx..."

      #remember to add desired modules to BOTH arch-dependent commands below:
      case $( arch ) in
      ( i686 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER" &>> /var/log/cfn-init.log  && \
       cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz |  tar zx && cd /root/nginx-$NGINX_VER  && \
        ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
         --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
         --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
         --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
         --with-pcre --with-debug  --with-ld-opt=' -Wl,-E' \
         --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -march=i686 -mtune=pentium4 -fasynchronous-unwind-tables' &>> /var/log/cfn-init.log \
        && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log);;

      ( x86_64 ) OUT=$([ ! -d "/root/nginx-$NGINX_VER" ] && echo "trying to install nginx $NGINX_VER"   && \
       cd /root/ && curl --retry 10  http://nginx.org/download/nginx-$NGINX_VER.tar.gz |  tar zx && cd /root/nginx-$NGINX_VER &>> /var/log/cfn-init.log && \
        ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
         --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
         --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module \
         --with-http_spdy_module --with-http_realip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_stub_status_module \
         --with-pcre --with-debug \
         --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' --with-ld-opt=' -Wl,-E' &>> /var/log/cfn-init.log \
        && make &>> /var/log/cfn-init.log && make install &>> /var/log/cfn-init.log );;
      esac

      echo $OUT

      if [ ! -f "/opt/elasticbeanstalk/node-install/node_updated" ]; then
        rm -rf /usr/bin/node
        rm -rf /usr/bin/npm   
      fi

      #make sure node binaries can be found globally
      if [ ! -L /usr/bin/node ]; then
        ln -s /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/node /usr/bin/node
        touch /opt/elasticbeanstalk/node-install/node_updated
        echo "YAY! Updated node version to `node -v`"
      fi

      if [ ! -L /usr/bin/npm ]; then
        ln -s /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm /usr/bin/npm
      fi

      echo "checking npm..."
      if [ ! -f "/opt/elasticbeanstalk/node-install/npm_updated" ]; then
      cd /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/ && /opt/elasticbeanstalk/node-install/node-v$NODE_VER-linux-$ARCH/bin/npm update npm -g
      touch /opt/elasticbeanstalk/node-install/npm_updated
      echo "YAY! Updated global NPM version to `npm -v`"
      else
        echo "Skipping NPM -g version update. To update, please uncomment 40install_node.sh:12"
      fi

  "/root/cron-node.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      #get env vars from EB app container and inject them here. Run as cron-node.sh cron-app.js
      eval "$(grep -E '^env [A-Za-z0-9_-]+="[^"]+"$' /etc/init/nodejs.conf |  sed 's/env /export /g')"
      export CRON_NODE_COMMAND="node $1"
      cd /var/app/current
      exec su -s /bin/sh -c 'PATH=$PATH:$NODE_HOME/bin $CRON_NODE_COMMAND 2>&1' nodejs >> /var/log/cron

commands:
  01_patch_ebnode_py:
    command: "sed -e '/rebuild/ s/^#*/#/' -i /opt/elasticbeanstalk/containerfiles/ebnode.py"
    ignoreErrors: true
